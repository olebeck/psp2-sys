// Error Codes
#[repr(u32)]
pub enum SceGxmErrorCode {
	SCE_GXM_ERROR_UNINITIALIZED                                 = 0x805B0000,
	SCE_GXM_ERROR_ALREADY_INITIALIZED                           = 0x805B0001,
	SCE_GXM_ERROR_OUT_OF_MEMORY                                 = 0x805B0002,
	SCE_GXM_ERROR_INVALID_VALUE                                 = 0x805B0003,
	SCE_GXM_ERROR_INVALID_POINTER                               = 0x805B0004,
	SCE_GXM_ERROR_INVALID_ALIGNMENT                             = 0x805B0005,
	SCE_GXM_ERROR_NOT_WITHIN_SCENE                              = 0x805B0006,
	SCE_GXM_ERROR_WITHIN_SCENE                                  = 0x805B0007,
	SCE_GXM_ERROR_NULL_PROGRAM                                  = 0x805B0008,
	SCE_GXM_ERROR_UNSUPPORTED                                   = 0x805B0009,
	SCE_GXM_ERROR_PATCHER_INTERNAL                              = 0x805B000A,
	SCE_GXM_ERROR_RESERVE_FAILED                                = 0x805B000B,
	SCE_GXM_ERROR_PROGRAM_IN_USE                                = 0x805B000C,
	SCE_GXM_ERROR_INVALID_INDEX_COUNT                           = 0x805B000D,
	SCE_GXM_ERROR_INVALID_POLYGON_MODE                          = 0x805B000E,
	SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_PRECISION         = 0x805B000F,
	SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_COMPONENT_COUNT   = 0x805B0010,
	SCE_GXM_ERROR_UNIFORM_BUFFER_NOT_RESERVED                   = 0x805B0011,
	SCE_GXM_ERROR_INVALID_AUXILIARY_SURFACE                     = 0x805B0013,
	SCE_GXM_ERROR_INVALID_PRECOMPUTED_DRAW                      = 0x805B0014,
	SCE_GXM_ERROR_INVALID_PRECOMPUTED_VERTEX_STATE              = 0x805B0015,
	SCE_GXM_ERROR_INVALID_PRECOMPUTED_FRAGMENT_STATE            = 0x805B0016,
	SCE_GXM_ERROR_DRIVER                                        = 0x805B0017
}

//
type SceGxmDisplayQueueCallback = unsafe extern "C" fn(*mut crate::void);
//
#[repr(C)]
pub struct SceGxmInitializeParams {
 	pub flags: u32,
 	pub displayQueueMaxPendingCount: u32,
 	pub displayQueueCallback: SceGxmDisplayQueueCallback,
    pub displayQueueCallbackDataSize: u32,
 	pub parameterBufferSize: SceSize,
}

use crate::types::*;


use self::SceGxmColorBaseFormat::*;
use self::SceGxmColorSwizzle4Mode::*;
use self::SceGxmMemoryAttribFlags::*;
use self::SceGxmTextureBaseFormat::*;
use self::SceGxmTextureSwizzle1Mode::*;
use self::SceGxmTextureSwizzle2Mode::*;
use self::SceGxmTextureSwizzle3Mode::*;
use self::SceGxmTextureSwizzle4Mode::*;
use self::SceGxmTextureSwizzle2ModeAlt::*;
use self::SceGxmTextureSwizzleYUV422Mode::*;
use self::SceGxmTextureSwizzleYUV420Mode::*;
use self::SceGxmColorMask::*;


#[repr(u32)]
pub enum SceGxmMemoryAttribFlags {
    SCE_GXM_MEMORY_ATTRIB_READ = 1,
    SCE_GXM_MEMORY_ATTRIB_WRITE = 2,
    SCE_GXM_MEMORY_ATTRIB_RW =
        SCE_GXM_MEMORY_ATTRIB_READ as u32 | SCE_GXM_MEMORY_ATTRIB_WRITE as u32,
}

#[repr(u32)]
pub enum SceGxmAttributeFormat {
    SCE_GXM_ATTRIBUTE_FORMAT_U8,
    SCE_GXM_ATTRIBUTE_FORMAT_S8,
    SCE_GXM_ATTRIBUTE_FORMAT_U16,
    SCE_GXM_ATTRIBUTE_FORMAT_S16,
    SCE_GXM_ATTRIBUTE_FORMAT_U8N,
    SCE_GXM_ATTRIBUTE_FORMAT_S8N,
    SCE_GXM_ATTRIBUTE_FORMAT_U16N,
    SCE_GXM_ATTRIBUTE_FORMAT_S16N,
    SCE_GXM_ATTRIBUTE_FORMAT_F16,
    SCE_GXM_ATTRIBUTE_FORMAT_F32,
    SCE_GXM_ATTRIBUTE_FORMAT_UNTYPED,
}

#[repr(u32)]
pub enum SceGxmDepthStencilFormat {
    SCE_GXM_DEPTH_STENCIL_FORMAT_DF32 = 0x00044000,
    SCE_GXM_DEPTH_STENCIL_FORMAT_S8 = 0x00022000,
    SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8 = 0x00066000,
    SCE_GXM_DEPTH_STENCIL_FORMAT_DF32M = 0x000CC000,
    SCE_GXM_DEPTH_STENCIL_FORMAT_DF32M_S8 = 0x000EE000,
    SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24 = 0x01266000,
    SCE_GXM_DEPTH_STENCIL_FORMAT_D16 = 0x02444000,
}

#[repr(u32)]
pub enum SceGxmPrimitiveType {
    SCE_GXM_PRIMITIVE_TRIANGLES = 0x00000000,
    SCE_GXM_PRIMITIVE_LINES = 0x04000000,
    SCE_GXM_PRIMITIVE_POINTS = 0x08000000,
    SCE_GXM_PRIMITIVE_TRIANGLE_STRIP = 0x0C000000,
    SCE_GXM_PRIMITIVE_TRIANGLE_FAN = 0x10000000,
    SCE_GXM_PRIMITIVE_TRIANGLE_EDGES = 0x14000000,
}

#[repr(u32)]
pub enum SceGxmEdgeEnableFlags {
    SCE_GXM_EDGE_ENABLE_01 = 0x00000100,
    SCE_GXM_EDGE_ENABLE_12 = 0x00000200,
    SCE_GXM_EDGE_ENABLE_20 = 0x00000400,
}

#[repr(u32)]
pub enum SceGxmRegionClipMode {
    SCE_GXM_REGION_CLIP_NONE = 0x00000000,
    SCE_GXM_REGION_CLIP_ALL = 0x40000000,
    SCE_GXM_REGION_CLIP_OUTSIDE = 0x80000000,
    SCE_GXM_REGION_CLIP_INSIDE = 0xC0000000,
}

#[repr(u32)]
pub enum SceGxmDepthFunc {
    SCE_GXM_DEPTH_FUNC_NEVER = 0x00000000,
    SCE_GXM_DEPTH_FUNC_LESS = 0x00400000,
    SCE_GXM_DEPTH_FUNC_EQUAL = 0x00800000,
    SCE_GXM_DEPTH_FUNC_LESS_EQUAL = 0x00C00000,
    SCE_GXM_DEPTH_FUNC_GREATER = 0x01000000,
    SCE_GXM_DEPTH_FUNC_NOT_EQUAL = 0x01400000,
    SCE_GXM_DEPTH_FUNC_GREATER_EQUAL = 0x01800000,
    SCE_GXM_DEPTH_FUNC_ALWAYS = 0x01C00000,
}

#[repr(u32)]
pub enum SceGxmStencilFunc {
    SCE_GXM_STENCIL_FUNC_NEVER = 0x00000000,
    SCE_GXM_STENCIL_FUNC_LESS = 0x02000000,
    SCE_GXM_STENCIL_FUNC_EQUAL = 0x04000000,
    SCE_GXM_STENCIL_FUNC_LESS_EQUAL = 0x06000000,
    SCE_GXM_STENCIL_FUNC_GREATER = 0x08000000,
    SCE_GXM_STENCIL_FUNC_NOT_EQUAL = 0x0A000000,
    SCE_GXM_STENCIL_FUNC_GREATER_EQUAL = 0x0C000000,
    SCE_GXM_STENCIL_FUNC_ALWAYS = 0x0E000000,
}

#[repr(u32)]
pub enum SceGxmStencilOp {
    SCE_GXM_STENCIL_OP_KEEP = 0x00000000,
    SCE_GXM_STENCIL_OP_ZERO = 0x00000001,
    SCE_GXM_STENCIL_OP_REPLACE = 0x00000002,
    SCE_GXM_STENCIL_OP_INCR = 0x00000003,
    SCE_GXM_STENCIL_OP_DECR = 0x00000004,
    SCE_GXM_STENCIL_OP_INVERT = 0x00000005,
    SCE_GXM_STENCIL_OP_INCR_WRAP = 0x00000006,
    SCE_GXM_STENCIL_OP_DECR_WRAP = 0x00000007,
}

#[repr(u32)]
pub enum SceGxmCullMode {
    SCE_GXM_CULL_NONE = 0x00000000,
    SCE_GXM_CULL_CW = 0x00000001,
    SCE_GXM_CULL_CCW = 0x00000002,
}

#[repr(u32)]
pub enum SceGxmPolygonMode {
    SCE_GXM_POLYGON_MODE_TRIANGLE_FILL = 0x00000000,
    SCE_GXM_POLYGON_MODE_LINE = 0x00008000,
    SCE_GXM_POLYGON_MODE_POINT_10UV = 0x00010000,
    SCE_GXM_POLYGON_MODE_POINT = 0x00018000,
    SCE_GXM_POLYGON_MODE_POINT_01UV = 0x00020000,
    SCE_GXM_POLYGON_MODE_TRIANGLE_LINE = 0x00028000,
    SCE_GXM_POLYGON_MODE_TRIANGLE_POINT = 0x00030000,
}

#[repr(u32)]
pub enum SceGxmColorSwizzle4Mode {
    SCE_GXM_COLOR_SWIZZLE4_ABGR = 0x00000000,
    SCE_GXM_COLOR_SWIZZLE4_ARGB = 0x00100000,
    SCE_GXM_COLOR_SWIZZLE4_RGBA = 0x00200000,
    SCE_GXM_COLOR_SWIZZLE4_BGRA = 0x00300000,
}

#[repr(u32)]
pub enum SceGxmColorSwizzle3Mode {
    SCE_GXM_COLOR_SWIZZLE3_BGR = 0x00000000,
    SCE_GXM_COLOR_SWIZZLE3_RGB = 0x00100000,
}

#[repr(u32)]
pub enum SceGxmColorSwizzle2Mode {
    SCE_GXM_COLOR_SWIZZLE2_GR = 0x00000000,
    SCE_GXM_COLOR_SWIZZLE2_RG = 0x00100000,
    SCE_GXM_COLOR_SWIZZLE2_RA = 0x00200000,
    SCE_GXM_COLOR_SWIZZLE2_AR = 0x00300000,
}

#[repr(u32)]
pub enum SceGxmColorSwizzle1Mode {
    SCE_GXM_COLOR_SWIZZLE1_R = 0x00000000,
    SCE_GXM_COLOR_SWIZZLE1_G = 0x00100000,
    //SCE_GXM_COLOR_SWIZZLE1_A = 0x00100000,
}

impl SceGxmColorSwizzle1Mode {
    pub const SCE_GXM_COLOR_SWIZZLE1_A: SceGxmColorSwizzle1Mode = SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_G;
}

#[repr(u32)]
pub enum SceGxmColorBaseFormat {
    SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 = 0x00000000,
    SCE_GXM_COLOR_BASE_FORMAT_U8U8U8 = 0x10000000,
    SCE_GXM_COLOR_BASE_FORMAT_U5U6U5 = 0x30000000,
    SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 = 0x40000000,
    SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 = 0x50000000,
    SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2 = 0x60000000,
    SCE_GXM_COLOR_BASE_FORMAT_F16 = 0xF0000000,
    SCE_GXM_COLOR_BASE_FORMAT_F16F16 = 0x00800000,
    SCE_GXM_COLOR_BASE_FORMAT_F32 = 0x10800000,
    SCE_GXM_COLOR_BASE_FORMAT_S16 = 0x20800000,
    SCE_GXM_COLOR_BASE_FORMAT_S16S16 = 0x30800000,
    SCE_GXM_COLOR_BASE_FORMAT_U16 = 0x40800000,
    SCE_GXM_COLOR_BASE_FORMAT_U16U16 = 0x50800000,
    SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 = 0x60800000,
    SCE_GXM_COLOR_BASE_FORMAT_U8 = 0x80800000,
    SCE_GXM_COLOR_BASE_FORMAT_S8 = 0x90800000,
    SCE_GXM_COLOR_BASE_FORMAT_S5S5U6 = 0xA0800000,
    SCE_GXM_COLOR_BASE_FORMAT_U8U8 = 0xB0800000,
    SCE_GXM_COLOR_BASE_FORMAT_S8S8 = 0xC0800000,
    SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 = 0xD0800000,
    SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 = 0xE0800000,
    SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 = 0x01000000,
    SCE_GXM_COLOR_BASE_FORMAT_F32F32 = 0x11000000,
    SCE_GXM_COLOR_BASE_FORMAT_F11F11F10 = 0x21000000,
    SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9 = 0x31000000,
    SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 = 0x41000000,
}

// Supported color formats
#[repr(u32)]
pub enum SceGxmColorFormat {
    SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_U8U8U8U8_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_U8U8U8U8_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_U8U8U8_BGR = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_BGR as u32,
    SCE_GXM_COLOR_FORMAT_U8U8U8_RGB = SCE_GXM_COLOR_BASE_FORMAT_U8U8U8 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_RGB as u32,
    //
    SCE_GXM_COLOR_FORMAT_U5U6U5_BGR = SCE_GXM_COLOR_BASE_FORMAT_U5U6U5 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_BGR as u32,
    SCE_GXM_COLOR_FORMAT_U5U6U5_RGB = SCE_GXM_COLOR_BASE_FORMAT_U5U6U5 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_RGB as u32,
    //
    SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_U5U5U5U1_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_U5U5U5U1_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_U4U4U4U4_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_U4U4U4U4_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_U8U3U3U2_ARGB = SceGxmColorBaseFormat::SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2 as u32,
    //
    SCE_GXM_COLOR_FORMAT_F16_R = SCE_GXM_COLOR_BASE_FORMAT_F16 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_R as u32,
    SCE_GXM_COLOR_FORMAT_F16_G = SCE_GXM_COLOR_BASE_FORMAT_F16 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_G as u32,
    //
    SCE_GXM_COLOR_FORMAT_F16F16_GR = SCE_GXM_COLOR_BASE_FORMAT_F16F16 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_GR as u32,
    SCE_GXM_COLOR_FORMAT_F16F16_RG = SCE_GXM_COLOR_BASE_FORMAT_F16F16 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RG as u32,
    //
    SCE_GXM_COLOR_FORMAT_F32_R = SCE_GXM_COLOR_BASE_FORMAT_F32 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_R as u32,
    //
    SCE_GXM_COLOR_FORMAT_S16_R = SCE_GXM_COLOR_BASE_FORMAT_S16 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_R as u32,
    SCE_GXM_COLOR_FORMAT_S16_G = SCE_GXM_COLOR_BASE_FORMAT_S16 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_G as u32,
    //
    SCE_GXM_COLOR_FORMAT_S16S16_GR = SCE_GXM_COLOR_BASE_FORMAT_S16S16 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_GR as u32,
    SCE_GXM_COLOR_FORMAT_S16S16_RG = SCE_GXM_COLOR_BASE_FORMAT_S16S16 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RG as u32,
    //
    SCE_GXM_COLOR_FORMAT_U16_R = SCE_GXM_COLOR_BASE_FORMAT_U16 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_R as u32,
    SCE_GXM_COLOR_FORMAT_U16_G = SCE_GXM_COLOR_BASE_FORMAT_U16 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_G as u32,
    //
    SCE_GXM_COLOR_FORMAT_U16U16_GR = SCE_GXM_COLOR_BASE_FORMAT_U16U16 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_GR as u32,
    SCE_GXM_COLOR_FORMAT_U16U16_RG = SCE_GXM_COLOR_BASE_FORMAT_U16U16 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RG as u32,
    //
    SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_U2U10U10U10_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_U10U10U10U2_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_U10U10U10U2_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_U8_R = SCE_GXM_COLOR_BASE_FORMAT_U8 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_R as u32,
    SCE_GXM_COLOR_FORMAT_U8_A = SCE_GXM_COLOR_BASE_FORMAT_U8 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_A as u32,
    //
    SCE_GXM_COLOR_FORMAT_S8_R = SCE_GXM_COLOR_BASE_FORMAT_S8 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_R as u32,
    SCE_GXM_COLOR_FORMAT_S8_A = SCE_GXM_COLOR_BASE_FORMAT_S8 as u32 | SceGxmColorSwizzle1Mode::SCE_GXM_COLOR_SWIZZLE1_A as u32,
    //
    SCE_GXM_COLOR_FORMAT_U6S5S5_BGR = SCE_GXM_COLOR_BASE_FORMAT_S5S5U6 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_BGR as u32,
    SCE_GXM_COLOR_FORMAT_S5S5U6_RGB = SCE_GXM_COLOR_BASE_FORMAT_S5S5U6 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_RGB as u32,
    //
    SCE_GXM_COLOR_FORMAT_U8U8_GR = SCE_GXM_COLOR_BASE_FORMAT_U8U8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_GR as u32,
    SCE_GXM_COLOR_FORMAT_U8U8_RG = SCE_GXM_COLOR_BASE_FORMAT_U8U8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RG as u32,
    SCE_GXM_COLOR_FORMAT_U8U8_RA = SCE_GXM_COLOR_BASE_FORMAT_U8U8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RA as u32,
    SCE_GXM_COLOR_FORMAT_U8U8_AR = SCE_GXM_COLOR_BASE_FORMAT_U8U8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_AR as u32,
    //
    SCE_GXM_COLOR_FORMAT_S8S8_GR = SCE_GXM_COLOR_BASE_FORMAT_S8S8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_GR as u32,
    SCE_GXM_COLOR_FORMAT_S8S8_RG = SCE_GXM_COLOR_BASE_FORMAT_S8S8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RG as u32,
    SCE_GXM_COLOR_FORMAT_S8S8_RA = SCE_GXM_COLOR_BASE_FORMAT_S8S8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RA as u32,
    SCE_GXM_COLOR_FORMAT_S8S8_AR = SCE_GXM_COLOR_BASE_FORMAT_S8S8 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_AR as u32,
    //
    SCE_GXM_COLOR_FORMAT_U8S8S8U8_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_U8U8S8S8_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_U8S8S8U8_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_S8S8U8U8_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_S8S8S8S8_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_S8S8S8S8_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_S8S8S8S8_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_S8S8S8S8_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_F16F16F16F16_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_F16F16F16F16_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_F16F16F16F16_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_F16F16F16F16_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,
    //
    SCE_GXM_COLOR_FORMAT_F32F32_GR = SCE_GXM_COLOR_BASE_FORMAT_F32F32 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_GR as u32,
    SCE_GXM_COLOR_FORMAT_F32F32_RG = SCE_GXM_COLOR_BASE_FORMAT_F32F32 as u32 | SceGxmColorSwizzle2Mode::SCE_GXM_COLOR_SWIZZLE2_RG as u32,
    //
    SCE_GXM_COLOR_FORMAT_F10F11F11_BGR =
        SCE_GXM_COLOR_BASE_FORMAT_F11F11F10 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_BGR as u32,
    SCE_GXM_COLOR_FORMAT_F11F11F10_RGB =
        SCE_GXM_COLOR_BASE_FORMAT_F11F11F10 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_RGB as u32,
    //
    SCE_GXM_COLOR_FORMAT_SE5M9M9M9_BGR =
        SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_BGR as u32,
    SCE_GXM_COLOR_FORMAT_SE5M9M9M9_RGB =
        SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9 as u32 | SceGxmColorSwizzle3Mode::SCE_GXM_COLOR_SWIZZLE3_RGB as u32,
    //
    SCE_GXM_COLOR_FORMAT_U2F10F10F10_ABGR =
        SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_COLOR_SWIZZLE4_ABGR as u32,
    SCE_GXM_COLOR_FORMAT_U2F10F10F10_ARGB =
        SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_COLOR_SWIZZLE4_ARGB as u32,
    SCE_GXM_COLOR_FORMAT_F10F10F10U2_RGBA =
        SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_COLOR_SWIZZLE4_RGBA as u32,
    SCE_GXM_COLOR_FORMAT_F10F10F10U2_BGRA =
        SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_COLOR_SWIZZLE4_BGRA as u32,

    // Legacy formats
    //SCE_GXM_COLOR_FORMAT_A8B8G8R8 = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR as u32,
    //SCE_GXM_COLOR_FORMAT_A8R8G8B8 = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB as u32,
    //SCE_GXM_COLOR_FORMAT_R5G6B5 = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U5U6U5_RGB as u32,
    //SCE_GXM_COLOR_FORMAT_A1R5G5B5 = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB as u32,
    //SCE_GXM_COLOR_FORMAT_A4R4G4B4 = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB as u32,
    //SCE_GXM_COLOR_FORMAT_A8 = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U8_A as u32,
}

impl SceGxmColorFormat { 
    pub const SCE_GXM_COLOR_FORMAT_A8B8G8R8: SceGxmColorFormat = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR;
    pub const SCE_GXM_COLOR_FORMAT_A8R8G8B8: SceGxmColorFormat = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB;
    pub const SCE_GXM_COLOR_FORMAT_R5G6B5: SceGxmColorFormat = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U5U6U5_RGB;
    pub const SCE_GXM_COLOR_FORMAT_A1R5G5B5: SceGxmColorFormat = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB;
    pub const SCE_GXM_COLOR_FORMAT_A4R4G4B4: SceGxmColorFormat = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB;
    pub const SCE_GXM_COLOR_FORMAT_A8: SceGxmColorFormat = SceGxmColorFormat::SCE_GXM_COLOR_FORMAT_U8_A;
}

#[repr(u32)]
pub enum SceGxmColorSurfaceType {
    SCE_GXM_COLOR_SURFACE_LINEAR = 0x00000000,
    SCE_GXM_COLOR_SURFACE_TILED = 0x04000000,
    SCE_GXM_COLOR_SURFACE_SWIZZLED = 0x08000000,
}

#[repr(u32)]
pub enum SceGxmColorSurfaceGammaMode {
	SCE_GXM_COLOR_SURFACE_GAMMA_NONE = 0x00000000,
	SCE_GXM_COLOR_SURFACE_GAMMA_R    = 0x00001000,
	SCE_GXM_COLOR_SURFACE_GAMMA_GR   = 0x00003000,
	//SCE_GXM_COLOR_SURFACE_GAMMA_BGR  = 0x00001000
}

impl SceGxmColorSurfaceGammaMode {
    pub const SCE_GXM_COLOR_SURFACE_GAMMA_BGR: SceGxmColorSurfaceGammaMode = SceGxmColorSurfaceGammaMode::SCE_GXM_COLOR_SURFACE_GAMMA_R;
}

//
#[repr(u32)]
pub enum SceGxmColorSurfaceDitherMode {
	SCE_GXM_COLOR_SURFACE_DITHER_DISABLED   = 0x00000000,
	SCE_GXM_COLOR_SURFACE_DITHER_ENABLED    = 0x00000008
}
//
#[repr(u32)]
pub enum SceGxmDepthStencilSurfaceType {
	SCE_GXM_DEPTH_STENCIL_SURFACE_LINEAR  = 0x00000000,
	SCE_GXM_DEPTH_STENCIL_SURFACE_TILED   = 0x00011000
}
//
#[repr(u32)]
pub enum SceGxmOutputRegisterFormat {
	SCE_GXM_OUTPUT_REGISTER_FORMAT_DECLARED,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_UCHAR4,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_CHAR4,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_USHORT2,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_SHORT2,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF4,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF2,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT2,
	SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT
}
//
#[repr(u32)]
pub enum SceGxmMultisampleMode {
	SCE_GXM_MULTISAMPLE_NONE,
	SCE_GXM_MULTISAMPLE_2X,
	SCE_GXM_MULTISAMPLE_4X
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzle4Mode {
	SCE_GXM_TEXTURE_SWIZZLE4_ABGR   = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE4_ARGB   = 0x00001000,
	SCE_GXM_TEXTURE_SWIZZLE4_RGBA   = 0x00002000,
	SCE_GXM_TEXTURE_SWIZZLE4_BGRA   = 0x00003000,
	SCE_GXM_TEXTURE_SWIZZLE4_1BGR   = 0x00004000,
	SCE_GXM_TEXTURE_SWIZZLE4_1RGB   = 0x00005000,
	SCE_GXM_TEXTURE_SWIZZLE4_RGB1   = 0x00006000,
	SCE_GXM_TEXTURE_SWIZZLE4_BGR1   = 0x00007000
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzle3Mode {
	SCE_GXM_TEXTURE_SWIZZLE3_BGR   = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE3_RGB   = 0x00001000
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzle2Mode {
	SCE_GXM_TEXTURE_SWIZZLE2_GR     = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE2_00GR   = 0x00001000,
	SCE_GXM_TEXTURE_SWIZZLE2_GRRR   = 0x00002000,
	SCE_GXM_TEXTURE_SWIZZLE2_RGGG   = 0x00003000,
	SCE_GXM_TEXTURE_SWIZZLE2_GRGR   = 0x00004000,
	SCE_GXM_TEXTURE_SWIZZLE2_00RG   = 0x00005000
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzle2ModeAlt {
	SCE_GXM_TEXTURE_SWIZZLE2_SD = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE2_DS = 0x00001000
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzle1Mode {
	SCE_GXM_TEXTURE_SWIZZLE1_R    = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE1_000R = 0x00001000,
	SCE_GXM_TEXTURE_SWIZZLE1_111R = 0x00002000,
	SCE_GXM_TEXTURE_SWIZZLE1_RRRR = 0x00003000,
	SCE_GXM_TEXTURE_SWIZZLE1_0RRR = 0x00004000,
	SCE_GXM_TEXTURE_SWIZZLE1_1RRR = 0x00005000,
	SCE_GXM_TEXTURE_SWIZZLE1_R000 = 0x00006000,
	SCE_GXM_TEXTURE_SWIZZLE1_R111 = 0x00007000
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzleYUV422Mode {
	SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0 = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0 = 0x00001000,
	SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0 = 0x00002000,
	SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0 = 0x00003000,
	SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1 = 0x00004000,
	SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1 = 0x00005000,
	SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1 = 0x00006000,
	SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1 = 0x00007000
}
//
#[repr(u32)]
pub enum SceGxmTextureSwizzleYUV420Mode {
	SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0 = 0x00000000,
	SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0 = 0x00001000,
	SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1 = 0x00002000,
	SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1 = 0x00003000
}
//
#[repr(u32)]
pub enum SceGxmTextureBaseFormat {
	SCE_GXM_TEXTURE_BASE_FORMAT_U8           = 0x00000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S8           = 0x01000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4     = 0x02000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2     = 0x03000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5     = 0x04000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5       = 0x05000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6       = 0x06000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U8U8         = 0x07000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S8S8         = 0x08000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U16          = 0x09000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S16          = 0x0A000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F16          = 0x0B000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8     = 0x0C000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8     = 0x0D000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10  = 0x0E000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U16U16       = 0x0F000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S16S16       = 0x10000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F16F16       = 0x11000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F32          = 0x12000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F32M         = 0x13000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8     = 0x14000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_X8U24        = 0x15000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U32          = 0x17000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S32          = 0x18000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9    = 0x19000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10    = 0x1A000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 = 0x1B000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 = 0x1C000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 = 0x1D000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_F32F32       = 0x1E000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U32U32       = 0x1F000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP     = 0x80000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP     = 0x81000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP   = 0x82000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP   = 0x83000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_UBC1         = 0x85000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_UBC2         = 0x86000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_UBC3         = 0x87000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2     = 0x90000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3     = 0x91000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_YUV422       = 0x92000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_P4           = 0x94000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_P8           = 0x95000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8       = 0x98000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8       = 0x99000000,
	SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10  = 0x9A000000
}
//
#[repr(u32)]
pub enum SceGxmTextureFormat {
	// Supported formats
	SCE_GXM_TEXTURE_FORMAT_U8_000R = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_111R = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_U8_R    = SCE_GXM_TEXTURE_BASE_FORMAT_U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S8_000R = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_111R = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_S8_R    = SCE_GXM_TEXTURE_BASE_FORMAT_S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U8U3U3U2_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U5U6U5_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U6S5S5_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_S5S5U6_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U8U8_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S8S8_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U16_000R = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_111R = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_U16_R    = SCE_GXM_TEXTURE_BASE_FORMAT_U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S16_000R = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_111R = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_S16_R    = SCE_GXM_TEXTURE_BASE_FORMAT_S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F16_000R = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_111R = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_F16_R    = SCE_GXM_TEXTURE_BASE_FORMAT_F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U16U16_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S16S16_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F16F16_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F32_000R = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_111R = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_F32_R    = SCE_GXM_TEXTURE_BASE_FORMAT_F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F32M_000R = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_111R = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_F32M_R    = SCE_GXM_TEXTURE_BASE_FORMAT_F32M as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_X8S8S8U8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X8U8S8S8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_X8U24_SD = SCE_GXM_TEXTURE_BASE_FORMAT_X8U24 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_SD as u32,
	SCE_GXM_TEXTURE_FORMAT_U24X8_DS = SCE_GXM_TEXTURE_BASE_FORMAT_X8U24 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_DS as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U32_000R = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_111R = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_U32_R    = SCE_GXM_TEXTURE_BASE_FORMAT_U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S32_000R = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_111R = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_111R as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_RRRR = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_RRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_0RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_0RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_1RRR = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_R000 = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_R111 = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R111 as u32,
	SCE_GXM_TEXTURE_FORMAT_S32_R    = SCE_GXM_TEXTURE_BASE_FORMAT_S32 as u32 | SCE_GXM_TEXTURE_SWIZZLE1_R as u32,
//
	SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F10F11F11_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_F11F11F10_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_F32F32_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32F32_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32F32_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_F32F32_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_F32F32_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_F32F32_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_F32F32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U32U32_00GR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_U32U32_GRRR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_U32U32_RGGG = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_U32U32_GRGR = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GRGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U32U32_00RG = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_00RG as u32,
	SCE_GXM_TEXTURE_FORMAT_U32U32_GR   = SCE_GXM_TEXTURE_BASE_FORMAT_U32U32 as u32 | SCE_GXM_TEXTURE_SWIZZLE2_GR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_UBC1 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_UBC2 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_UBC3 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
//
	SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1 as u32,
	SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1 as u32,
	SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC1 = SCE_GXM_TEXTURE_BASE_FORMAT_YUV422 as u32 | SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_P4_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_P4_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_P4 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_P8_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_P8_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_P8 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U8U8U8_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U8U8U8_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_S8S8S8_BGR = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_S8S8S8_RGB = SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8 as u32 | SCE_GXM_TEXTURE_SWIZZLE3_RGB as u32,
//
	SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ABGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ARGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_RGBA = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGBA as u32,
	SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_BGRA = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGRA as u32,
	SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1BGR = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1BGR as u32,
	SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1RGB = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_1RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_RGB1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_RGB1 as u32,
	SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_BGR1 = SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10 as u32 | SCE_GXM_TEXTURE_SWIZZLE4_BGR1 as u32,
//
	// Legacy formats
//
/*
	SCE_GXM_TEXTURE_FORMAT_L8 = SCE_GXM_TEXTURE_FORMAT_U8_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_A8 = SCE_GXM_TEXTURE_FORMAT_U8_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_R8 = SCE_GXM_TEXTURE_FORMAT_U8_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_A4R4G4B4 = SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_A1R5G5B5 = SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_R5G6B5 = SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB as u32,
	SCE_GXM_TEXTURE_FORMAT_A8L8 = SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_L8A8 = SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_G8R8 = SCE_GXM_TEXTURE_FORMAT_U8U8_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_L16 = SCE_GXM_TEXTURE_FORMAT_U16_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_A16 = SCE_GXM_TEXTURE_FORMAT_U16_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_R16 = SCE_GXM_TEXTURE_FORMAT_U16_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_D16 = SCE_GXM_TEXTURE_FORMAT_U16_R as u32,
	SCE_GXM_TEXTURE_FORMAT_LF16 = SCE_GXM_TEXTURE_FORMAT_F16_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_AF16 = SCE_GXM_TEXTURE_FORMAT_F16_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_RF16 = SCE_GXM_TEXTURE_FORMAT_F16_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_A8R8G8B8 = SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB as u32,
	SCE_GXM_TEXTURE_FORMAT_A8B8G8R8 = SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_AF16LF16 = SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR as u32,
	SCE_GXM_TEXTURE_FORMAT_LF16AF16 = SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG as u32,
	SCE_GXM_TEXTURE_FORMAT_GF16RF16 = SCE_GXM_TEXTURE_FORMAT_F16F16_00GR as u32,
	SCE_GXM_TEXTURE_FORMAT_LF32M = SCE_GXM_TEXTURE_FORMAT_F32M_1RRR as u32,
	SCE_GXM_TEXTURE_FORMAT_AF32M = SCE_GXM_TEXTURE_FORMAT_F32M_R000 as u32,
	SCE_GXM_TEXTURE_FORMAT_RF32M = SCE_GXM_TEXTURE_FORMAT_F32M_000R as u32,
	SCE_GXM_TEXTURE_FORMAT_DF32M = SCE_GXM_TEXTURE_FORMAT_F32M_R as u32,
	SCE_GXM_TEXTURE_FORMAT_VYUY = SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_YVYU = SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0 as u32,
	SCE_GXM_TEXTURE_FORMAT_UBC1 = SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_UBC2 = SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_UBC3 = SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRT2BPP = SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRT4BPP = SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP = SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR as u32,
	SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP = SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR as u32
*/
}

impl SceGxmTextureFormat {
    pub const SCE_GXM_TEXTURE_FORMAT_L8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8_1RRR;
    pub const SCE_GXM_TEXTURE_FORMAT_A8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8_R000;
    pub const SCE_GXM_TEXTURE_FORMAT_R8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8_000R;
    pub const SCE_GXM_TEXTURE_FORMAT_A4R4G4B4: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB;
    pub const SCE_GXM_TEXTURE_FORMAT_A1R5G5B5: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB;
    pub const SCE_GXM_TEXTURE_FORMAT_R5G6B5: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB;
    pub const SCE_GXM_TEXTURE_FORMAT_A8L8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR;
    pub const SCE_GXM_TEXTURE_FORMAT_L8A8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG;
    pub const SCE_GXM_TEXTURE_FORMAT_G8R8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8U8_00GR;
    pub const SCE_GXM_TEXTURE_FORMAT_L16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U16_1RRR;
    pub const SCE_GXM_TEXTURE_FORMAT_A16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U16_R000;
    pub const SCE_GXM_TEXTURE_FORMAT_R16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U16_000R;
    pub const SCE_GXM_TEXTURE_FORMAT_D16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U16_R;
    pub const SCE_GXM_TEXTURE_FORMAT_LF16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F16_1RRR;
    pub const SCE_GXM_TEXTURE_FORMAT_AF16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F16_R000;
    pub const SCE_GXM_TEXTURE_FORMAT_RF16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F16_000R;
    pub const SCE_GXM_TEXTURE_FORMAT_A8R8G8B8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB;
    pub const SCE_GXM_TEXTURE_FORMAT_A8B8G8R8: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_AF16LF16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR;
    pub const SCE_GXM_TEXTURE_FORMAT_LF16AF16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG;
    pub const SCE_GXM_TEXTURE_FORMAT_GF16RF16: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F16F16_00GR;
    pub const SCE_GXM_TEXTURE_FORMAT_LF32M: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F32M_1RRR;
    pub const SCE_GXM_TEXTURE_FORMAT_AF32M: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F32M_R000;
    pub const SCE_GXM_TEXTURE_FORMAT_RF32M: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F32M_000R;
    pub const SCE_GXM_TEXTURE_FORMAT_DF32M: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_F32M_R;
    pub const SCE_GXM_TEXTURE_FORMAT_VYUY: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0;
    pub const SCE_GXM_TEXTURE_FORMAT_YVYU: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC1: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC2: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_UBC3: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT2BPP: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRT4BPP: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR;
    pub const SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP: SceGxmTextureFormat = SceGxmTextureFormat::SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR;
}

//

#[repr(u32)]
pub enum SceGxmTextureType {
	SCE_GXM_TEXTURE_SWIZZLED             = 0x00000000,
	SCE_GXM_TEXTURE_CUBE                 = 0x40000000,
	SCE_GXM_TEXTURE_LINEAR               = 0x60000000,
	SCE_GXM_TEXTURE_TILED                = 0x80000000,
	SCE_GXM_TEXTURE_SWIZZLED_ARBITRARY = 0xA0000000,
	SCE_GXM_TEXTURE_LINEAR_STRIDED      = 0xC0000000,
	SCE_GXM_TEXTURE_CUBE_ARBITRARY      = 0xE0000000
}

#[repr(u32)]
pub enum SceGxmTextureFilter {
	SCE_GXM_TEXTURE_FILTER_POINT        = 0x00000000,
	SCE_GXM_TEXTURE_FILTER_LINEAR       = 0x00000001
}

#[repr(u32)]
pub enum SceGxmTextureMipFilter {
	SCE_GXM_TEXTURE_MIP_FILTER_DISABLED = 0x00000000,
	SCE_GXM_TEXTURE_MIP_FILTER_ENABLED  = 0x00000200
}

#[repr(u32)]
pub enum SceGxmTextureAddrMode {
	SCE_GXM_TEXTURE_ADDR_REPEAT                 = 0x00000000,
	SCE_GXM_TEXTURE_ADDR_MIRROR                 = 0x00000001,
	SCE_GXM_TEXTURE_ADDR_CLAMP                  = 0x00000002,
	SCE_GXM_TEXTURE_ADDR_MIRROR_CLAMP           = 0x00000003,
	SCE_GXM_TEXTURE_ADDR_REPEAT_IGNORE_BORDER   = 0x00000004,
	SCE_GXM_TEXTURE_ADDR_CLAMP_FULL_BORDER      = 0x00000005,
	SCE_GXM_TEXTURE_ADDR_CLAMP_IGNORE_BORDER    = 0x00000006,
	SCE_GXM_TEXTURE_ADDR_CLAMP_HALF_BORDER      = 0x00000007
}

#[repr(u32)]
pub enum SceGxmTextureGammaMode {
	SCE_GXM_TEXTURE_GAMMA_NONE  = 0x00000000,
	SCE_GXM_TEXTURE_GAMMA_R     = 0x08000000,
	SCE_GXM_TEXTURE_GAMMA_GR    = 0x18000000,
	//SCE_GXM_TEXTURE_GAMMA_BGR   = 0x08000000
}

impl SceGxmTextureGammaMode {
    pub const SCE_GXM_TEXTURE_GAMMA_BGR: SceGxmTextureGammaMode = SceGxmTextureGammaMode::SCE_GXM_TEXTURE_GAMMA_R;
}

#[repr(u32)]
pub enum SceGxmIndexFormat {
	SCE_GXM_INDEX_FORMAT_U16   = 0x00000000,
	SCE_GXM_INDEX_FORMAT_U32   = 0x01000000
}

#[repr(u32)]
pub enum SceGxmIndexSource {
	SCE_GXM_INDEX_SOURCE_INDEX_16BIT    = 0x00000000,
	SCE_GXM_INDEX_SOURCE_INDEX_32BIT    = 0x00000001,
	SCE_GXM_INDEX_SOURCE_INSTANCE_16BIT = 0x00000002,
	SCE_GXM_INDEX_SOURCE_INSTANCE_32BIT = 0x00000003
}

#[repr(u32)]
pub enum SceGxmFragmentProgramMode {
	SCE_GXM_FRAGMENT_PROGRAM_DISABLED   = 0x00200000,
	SCE_GXM_FRAGMENT_PROGRAM_ENABLED    = 0x00000000
}

#[repr(u32)]
pub enum SceGxmDepthWriteMode {
	SCE_GXM_DEPTH_WRITE_DISABLED = 0x00100000,
	SCE_GXM_DEPTH_WRITE_ENABLED  = 0x00000000
}

#[repr(u32)]
pub enum SceGxmLineFillLastPixelMode {
	SCE_GXM_LINE_FILL_LAST_PIXEL_DISABLED = 0x00000000,
	SCE_GXM_LINE_FILL_LAST_PIXEL_ENABLED  = 0x00080000
}

#[repr(u32)]
pub enum SceGxmTwoSidedMode {
	SCE_GXM_TWO_SIDED_DISABLED  = 0x00000000,
	SCE_GXM_TWO_SIDED_ENABLED   = 0x00000800
}

#[repr(u32)]
pub enum SceGxmWClampMode {
	SCE_GXM_WCLAMP_MODE_DISABLED  = 0x00000000,
	SCE_GXM_WCLAMP_MODE_ENABLED   = 0x00008000
}

#[repr(u32)]
pub enum SceGxmViewportMode {
	SCE_GXM_VIEWPORT_DISABLED   = 0x00010000,
	SCE_GXM_VIEWPORT_ENABLED    = 0x00000000
}

#[repr(u32)]
pub enum SceGxmWBufferMode {
	SCE_GXM_WBUFFER_DISABLED  = 0x00000000,
	SCE_GXM_WBUFFER_ENABLED   = 0x00004000
}

#[repr(u32)]
pub enum SceGxmDepthStencilForceLoadMode {
	SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_DISABLED = 0x00000000,
	SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_ENABLED  = 0x00000002
}

#[repr(u32)]
pub enum SceGxmDepthStencilForceStoreMode {
	SCE_GXM_DEPTH_STENCIL_FORCE_STORE_DISABLED = 0x00000000,
	SCE_GXM_DEPTH_STENCIL_FORCE_STORE_ENABLED  = 0x00000004
}

#[repr(u32)]
pub enum SceGxmSceneFlags {
	SCE_GXM_SCENE_FRAGMENT_SET_DEPENDENCY     = 0x00000001,
	SCE_GXM_SCENE_VERTEX_WAIT_FOR_DEPENDENCY  = 0x00000002,
	SCE_GXM_SCENE_FRAGMENT_TRANSFER_SYNC       = 0x00000004,
	SCE_GXM_SCENE_VERTEX_TRANSFER_SYNC         = 0x00000008
}

#[repr(u32)]
pub enum SceGxmMidSceneFlags {
	SCE_GXM_MIDSCENE_PRESERVE_DEFAULT_UNIFORM_BUFFERS = 0x00000001
}

#[repr(u32)]
pub enum SceGxmColorSurfaceScaleMode {
	SCE_GXM_COLOR_SURFACE_SCALE_NONE           = 0x00000000,
	SCE_GXM_COLOR_SURFACE_SCALE_MSAA_DOWNSCALE = 0x00000001
}

#[repr(u32)]
pub enum SceGxmOutputRegisterSize {
	SCE_GXM_OUTPUT_REGISTER_SIZE_32BIT = 0x00000000,
	SCE_GXM_OUTPUT_REGISTER_SIZE_64BIT = 0x00000001
}

#[repr(u32)]
pub enum SceGxmVisibilityTestMode {
	SCE_GXM_VISIBILITY_TEST_DISABLED = 0x00000000,
	SCE_GXM_VISIBILITY_TEST_ENABLED  = 0x00004000
}
//
#[repr(u32)]
pub enum SceGxmVisibilityTestOp {
	SCE_GXM_VISIBILITY_TEST_OP_INCREMENT = 0x00000000,
	SCE_GXM_VISIBILITY_TEST_OP_SET       = 0x00040000
}
//
#[repr(u32)]
pub enum SceGxmBlendFunc {
	SCE_GXM_BLEND_FUNC_NONE,
	SCE_GXM_BLEND_FUNC_ADD,
	SCE_GXM_BLEND_FUNC_SUBTRACT,
	SCE_GXM_BLEND_FUNC_REVERSE_SUBTRACT,
	SCE_GXM_BLEND_FUNC_MIN,
	SCE_GXM_BLEND_FUNC_MAX
}
//
#[repr(u32)]
pub enum SceGxmBlendFactor {
	SCE_GXM_BLEND_FACTOR_ZERO,
	SCE_GXM_BLEND_FACTOR_ONE,
	SCE_GXM_BLEND_FACTOR_SRC_COLOR,
	SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_COLOR,
	SCE_GXM_BLEND_FACTOR_SRC_ALPHA,
	SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA,
	SCE_GXM_BLEND_FACTOR_DST_COLOR,
	SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_COLOR,
	SCE_GXM_BLEND_FACTOR_DST_ALPHA,
	SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_ALPHA,
	SCE_GXM_BLEND_FACTOR_SRC_ALPHA_SATURATE,
	SCE_GXM_BLEND_FACTOR_DST_ALPHA_SATURATE
}
//
#[repr(u32)]
pub enum SceGxmColorMask {
	SCE_GXM_COLOR_MASK_NONE = 0,
	SCE_GXM_COLOR_MASK_A    = (1 << 0),
	SCE_GXM_COLOR_MASK_R    = (1 << 1),
	SCE_GXM_COLOR_MASK_G    = (1 << 2),
	SCE_GXM_COLOR_MASK_B    = (1 << 3),
	SCE_GXM_COLOR_MASK_ALL  = (SCE_GXM_COLOR_MASK_A as u32 | SCE_GXM_COLOR_MASK_B as u32 | SCE_GXM_COLOR_MASK_G as u32 | SCE_GXM_COLOR_MASK_R as u32)
}
//
#[repr(u32)]
pub enum SceGxmTransferFormat {
	SCE_GXM_TRANSFER_FORMAT_U8_R			= 0x00000000,
	SCE_GXM_TRANSFER_FORMAT_U4U4U4U4_ABGR		= 0x00010000,
	SCE_GXM_TRANSFER_FORMAT_U1U5U5U5_ABGR		= 0x00020000,
	SCE_GXM_TRANSFER_FORMAT_U5U6U5_BGR		= 0x00030000,
	SCE_GXM_TRANSFER_FORMAT_U8U8_GR			= 0x00040000,
	SCE_GXM_TRANSFER_FORMAT_U8U8U8_BGR		= 0x00050000,
	SCE_GXM_TRANSFER_FORMAT_U8U8U8U8_ABGR		= 0x00060000,
	SCE_GXM_TRANSFER_FORMAT_VYUY422			= 0x00070000,
	SCE_GXM_TRANSFER_FORMAT_YVYU422			= 0x00080000,
	SCE_GXM_TRANSFER_FORMAT_UYVY422			= 0x00090000,
	SCE_GXM_TRANSFER_FORMAT_YUYV422			= 0x000a0000,
	SCE_GXM_TRANSFER_FORMAT_U2U10U10U10_ABGR	= 0x000d0000,
	SCE_GXM_TRANSFER_FORMAT_RAW16			= 0x000f0000,
	SCE_GXM_TRANSFER_FORMAT_RAW32			= 0x00110000,
	SCE_GXM_TRANSFER_FORMAT_RAW64			= 0x00120000,
	SCE_GXM_TRANSFER_FORMAT_RAW128			= 0x00130000
}
//
#[repr(u32)]
pub enum SceGxmTransferFlags {
	SCE_GXM_TRANSFER_FRAGMENT_SYNC	= 0x00000001,
	SCE_GXM_TRANSFER_VERTEX_SYNC	= 0x00000002
}
//
#[repr(u32)]
pub enum SceGxmTransferColorKeyMode {
	SCE_GXM_TRANSFER_COLORKEY_NONE   = 0,
	SCE_GXM_TRANSFER_COLORKEY_PASS   = 1,
	SCE_GXM_TRANSFER_COLORKEY_REJECT = 2
}
//
#[repr(u32)]
pub enum SceGxmTransferType {
	SCE_GXM_TRANSFER_LINEAR   = 0x00000000,
	SCE_GXM_TRANSFER_TILED    = 0x00400000,
	SCE_GXM_TRANSFER_SWIZZLED = 0x00800000
}
//

bitfield::bitfield! {
	#[repr(C)]
	struct SceGxmBlendInfoBlendfunc(u8);
	u8;
	colorFunc, set_colorFunc: 0,4;
	alphaFunc, set_alphaFunc: 4,8;
}

bitfield::bitfield! {
	#[repr(C)]
	struct SceGxmBlendInfoBlendFactor(u8);
	u8;
	colorSrc, set_colorSrc: 0,4;
	colorDst, set_colorDst: 4,8;
	alphaSrc, set_alphaSrc: 8,12;
	alphaDst, set_alphaDst: 12,16;
}

#[repr(C)]
pub struct SceGxmBlendInfo {
	colorMask: SceGxmColorMask,
	Blendfunc: SceGxmBlendInfoBlendfunc,
    BlendFactor: SceGxmBlendInfoBlendFactor,
}

//
#[repr(C)]
pub struct SceGxmRenderTarget {
	private: [u8; 0]
}
//
#[repr(C)]
pub struct SceGxmSyncObject {
	private: [u8; 0]
}
//
#[repr(C)]
pub struct SceGxmVertexAttribute {
	streamIndex: u16,
	offset: u16,
	format: SceGxmAttributeFormat,
	componentCount: u8,
	regIndex: u16
}
//
#[repr(C)]
pub struct SceGxmVertexStream {
	stride: u16,
	indexSource: u16
}
//

bitfield::bitfield! {
	#[repr(C)]
	pub struct SceGxmTexture(u32);
    u32;
    // Control Word 0
    get_unk0, set_unk0: 0, 3; // 3
    get_vaddr_mode, set_vaddr_mode: 3, 6; // 3
    get_uaddr_mode, set_uaddr_mode: 6, 9; // 3
    get_mip_filter, set_mip_filter: 9, 10; // 1
    get_min_filter, set_min_filter: 10, 12; // 2
    get_mag_filter, set_mag_filter: 12, 14; // 2
    get_unk1, set_unk1: 14, 17; // 3
    get_mip_count, set_mip_count: 17, 121; // 4
    get_lod_bias, set_lod_bias: 21, 27; // 6
    get_gamma_mode, set_gamma_mode: 27, 29; // 2
    get_unk2, set_unk2: 29, 31; // 2
    get_format0, set_format0: 31, 32; // 1
    // Control Word 1
    get_height, set_height: 32, 44; // 12
    get_width, set_width: 44, 56; // 12
    get_base_format, set_base_format: 56, 61; // 5
    get_type, set_type: 61, 64; // 3
    // Control Word 2
    get_lod_min0, set_lod_min0: 64, 66; // 2
    get_data_addr, set_data_addr: 66, 96; // 30
    // Control Word 3
    get_palette_addr, set_palette_addr: 96, 112; // 26
    get_lod_min1, set_lod_min1: 112, 114; // 2
    get_swizzle_format, set_swizzle_format: 114, 117; // 3
    get_normalize_mode, set_normalize_mode: 117, 118; // 1
}

//
#[repr(C)]
pub struct SceGxmColorSurface {
	pbeSidebandWord: u32,
	pbeEmitWords: [u32; 6],
	outputRegisterSize: u32,
    backgroundTex: SceGxmTexture,
}
//
#[repr(C)]
pub struct SceGxmDepthStencilSurface {
	zlsControl: u32,
	depthData: *const crate::void,
	stencilData: *const crate::void,
	backgroundDepth: f32,
	backgroundControl: u32,
}
//
// Represents an auxiliary surface
#[repr(C)]
pub struct SceGxmAuxiliarySurface {
	colorFormat: u32, // Format of auxiliary surface data from SceGxmColorFormat
	r#type: u32,      // Memory layout of the surface data from SceGxmColorSurfaceType
	width: u32,       // Surface width
	height: u32,      // Surface height
	stride: u32,      // Surface stride in bytes
	data: *const crate::void // A pointer to the surface data
}
//
#[repr(C)]
pub struct SceGxmNotification {
	address: *const u32,
	value: u32
}
//
#[repr(C)]
pub struct SceGxmValidRegion {
	xMin: u32,
	yMin: u32,
	xMax: u32,
	yMax: u32
}
//
#[repr(C)]
pub struct SceGxmContext {
	private: [u8; 0]
}
//
pub const SCE_GXM_MINIMUM_CONTEXT_HOST_MEM_SIZE: i32 = 2 * 1024;
pub const SCE_GXM_DEFAULT_PARAMETER_BUFFER_SIZE: i32 = 16 * 1024 * 1024;
pub const SCE_GXM_DEFAULT_VDM_RING_BUFFER_SIZE: i32  = 128 * 1024;
pub const SCE_GXM_DEFAULT_VERTEX_RING_BUFFER_SIZE: i32  = 2 * 1024 * 1024;
pub const SCE_GXM_DEFAULT_FRAGMENT_RING_BUFFER_SIZE: i32 = 512 * 1024;
pub const SCE_GXM_DEFAULT_FRAGMENT_USSE_RING_BUFFER_SIZE: i32 = 16 * 1024;
//
#[repr(C)]
pub struct SceGxmContextParams {
	hostMem: *const crate::void,
	hostMemSize: SceSize,
	vdmRingBufferMem: *const crate::void,
	vdmRingBufferMemSize: SceSize,
	vertexRingBufferMem: *const crate::void,
    vertexRingBufferMemSize: SceSize,
	fragmentRingBufferMem: *const crate::void,
	fragmentRingBufferMemSize: SceSize,
	fragmentUsseRingBufferMem: *const crate::void,
	fragmentUsseRingBufferMemSize: SceSize,
	fragmentUsseRingBufferOffset: u32,
}
//
#[repr(C)]
pub struct SceGxmVertexProgram {
	private: [u8; 0]
}
//
#[repr(C)]
pub struct SceGxmFragmentProgram {
	private: [u8; 0]
}
//
#[repr(u32)]
pub enum SceGxmPrecomputedWordCount {
	SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT   = 7,
	SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT = 9,
	SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT           = 11,
}
//
#[repr(C)]
pub struct SceGxmPrecomputedVertexState {
	data: [u32; SceGxmPrecomputedWordCount::SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT as usize]
}
//
#[repr(C)]
pub struct SceGxmPrecomputedFragmentState {
	data: [u32; SceGxmPrecomputedWordCount::SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT as usize]
}
//
#[repr(C)]
pub struct SceGxmPrecomputedDraw {
	data: [u32; SceGxmPrecomputedWordCount::SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT as usize]
}
//
const SCE_GXM_MAX_VERTEX_ATTRIBUTES: u32 =   16;
const SCE_GXM_MAX_VERTEX_STREAMS: u32 = 4;
const SCE_GXM_MAX_TEXTURE_UNITS: u32 = 16;
const SCE_GXM_MAX_UNIFORM_BUFFERS: u32 = 8;
const SCE_GXM_MAX_AUXILIARY_SURFACES: u32 =   3;
//
const SCE_GXM_TILE_SHIFTX: u32 = 5;
const SCE_GXM_TILE_SHIFTY: u32 = 5;
const SCE_GXM_TILE_SIZEX: u32 = 1u32 << SCE_GXM_TILE_SHIFTX;
const SCE_GXM_TILE_SIZEY: u32 = 1u32 << SCE_GXM_TILE_SHIFTY;
//
const SCE_GXM_COLOR_SURFACE_ALIGNMENT: u32 = 4;
const SCE_GXM_TEXTURE_ALIGNMENT: u32 = 16;
const SCE_GXM_DEPTHSTENCIL_SURFACE_ALIGNMENT: u32 = 16;
const SCE_GXM_PALETTE_ALIGNMENT: u32 = 64;
//

#[repr(C)]
pub struct SceGxmProgram {
	private: [u8; 0]
}
//

#[repr(C)]
pub struct SceGxmProgramParameter {
	private: [u8; 0]
}
//
#[repr(u32)]
pub enum SceGxmProgramType {
	SCE_GXM_VERTEX_PROGRAM,
	SCE_GXM_FRAGMENT_PROGRAM
}
//
#[repr(u32)]
pub enum SceGxmParameterCategory {
	SCE_GXM_PARAMETER_CATEGORY_ATTRIBUTE,
	SCE_GXM_PARAMETER_CATEGORY_UNIFORM,
	SCE_GXM_PARAMETER_CATEGORY_SAMPLER,
	SCE_GXM_PARAMETER_CATEGORY_AUXILIARY_SURFACE,
	SCE_GXM_PARAMETER_CATEGORY_UNIFORM_BUFFER
}
//
#[repr(u32)]
pub enum SceGxmParameterType {
	SCE_GXM_PARAMETER_TYPE_F32,
	SCE_GXM_PARAMETER_TYPE_F16,
	SCE_GXM_PARAMETER_TYPE_C10,
	SCE_GXM_PARAMETER_TYPE_U32,
	SCE_GXM_PARAMETER_TYPE_S32,
	SCE_GXM_PARAMETER_TYPE_U16,
	SCE_GXM_PARAMETER_TYPE_S16,
	SCE_GXM_PARAMETER_TYPE_U8,
	SCE_GXM_PARAMETER_TYPE_S8,
	SCE_GXM_PARAMETER_TYPE_AGGREGATE
}
//
#[repr(u32)]
pub enum SceGxmParameterSemantic {
	SCE_GXM_PARAMETER_SEMANTIC_NONE,
	SCE_GXM_PARAMETER_SEMANTIC_ATTR,
	SCE_GXM_PARAMETER_SEMANTIC_BCOL,
	SCE_GXM_PARAMETER_SEMANTIC_BINORMAL,
	SCE_GXM_PARAMETER_SEMANTIC_BLENDINDICES,
	SCE_GXM_PARAMETER_SEMANTIC_BLENDWEIGHT,
	SCE_GXM_PARAMETER_SEMANTIC_COLOR,
	SCE_GXM_PARAMETER_SEMANTIC_DIFFUSE,
	SCE_GXM_PARAMETER_SEMANTIC_FOGCOORD,
	SCE_GXM_PARAMETER_SEMANTIC_NORMAL,
	SCE_GXM_PARAMETER_SEMANTIC_POINTSIZE,
	SCE_GXM_PARAMETER_SEMANTIC_POSITION,
	SCE_GXM_PARAMETER_SEMANTIC_SPECULAR,
	SCE_GXM_PARAMETER_SEMANTIC_TANGENT,
	SCE_GXM_PARAMETER_SEMANTIC_TEXCOORD
}
//
#[repr(C)]
pub struct SceGxmShaderPatcher {
	private: [u8; 0]
}

#[repr(C)]
pub struct SceGxmRegisteredProgram {
	private: [u8; 0]
}

type SceGxmShaderPatcherId = *const SceGxmRegisteredProgram;

type SceGxmShaderPatcherHostAllocCallback = extern "C" fn(*mut crate::void, SceSize);
type SceGxmShaderPatcherHostFreeCallback = extern "C" fn(*mut crate::void, *mut crate::void);
type SceGxmShaderPatcherBufferAllocCallback = extern "C" fn(*mut crate::void, SceSize);
type SceGxmShaderPatcherBufferFreeCallback = extern "C" fn(*mut crate::void, *mut crate::void);
type SceGxmShaderPatcherUsseAllocCallback = extern "C" fn(*mut crate::void, SceSize, *mut u32);
type SceGxmShaderPatcherUsseFreeCallback = extern "C" fn(*mut crate::void, *mut crate::void);

//
#[repr(C)]
pub struct SceGxmShaderPatcherParams {
	userData: *mut crate::void,
	hostAllocCallback: *const SceGxmShaderPatcherHostAllocCallback,
	hostFreeCallback: *const SceGxmShaderPatcherHostFreeCallback,
	bufferAllocCallback: *const SceGxmShaderPatcherBufferAllocCallback,
	bufferFreeCallback: *const SceGxmShaderPatcherBufferFreeCallback,
	bufferMem: *const crate::void,
	bufferMemSize: SceSize,
	vertexUsseAllocCallback: *const SceGxmShaderPatcherUsseAllocCallback,
	vertexUsseFreeCallback: *const SceGxmShaderPatcherUsseFreeCallback,
	vertexUsseMem: *mut crate::void,
	vertexUsseMemSize: SceSize,
	vertexUsseOffset: u32,
	fragmentUsseAllocCallback: *const SceGxmShaderPatcherUsseAllocCallback,
	fragmentUsseFreeCallback: *const SceGxmShaderPatcherUsseFreeCallback,
	fragmentUsseMem: *mut crate::void,
	fragmentUsseMemSize: SceSize,
	fragmentUsseOffset: u32
}
//
#[repr(u32)]
pub enum SceGxmRenderTargetFlags {
	SCE_GXM_RENDER_TARGET_CUSTOM_MULTISAMPLE_LOCATIONS = (1 << 0)
}
//
#[repr(C)]
pub struct SceGxmRenderTargetParams {
	flags: u32,	                // Bitwise combined flags from ::SceGxmRenderTargetFlags.
	width: u16,	                // The width of the render target in pixels.
	height: u16,                // The height of the render target in pixels.
	scenesPerFrame: u16,        // The expected number of scenes per frame, in the range [1,SCE_GXM_MAX_SCENES_PER_RENDERTARGET].
	multisampleMode: u16,       // A value from the #SceGxmMultisampleMode enum.
	multisampleLocations: u32,  // If enabled in the flags, the multisample locations to use.
	driverMemBlock: SceUID,     // The uncached LPDDR memblock for the render target GPU data structures or SCE_UID_INVALID_UID to specify memory should be allocated in libgxm.
}
//
/* prototypes */
//
#[cfg_attr(not(feature = "dox"), link(kind = "static", name = "SceGxm_stub"))]
extern "C" {
    pub fn sceGxmInitialize(params: *const SceGxmInitializeParams) -> i32;
    pub fn sceGxmTerminate() -> i32;
    //
    pub fn sceGxmGetNotificationRegion() -> *const u32;
    pub fn sceGxmNotificationWait(notification: *const SceGxmNotification) -> i32;
    //
    pub fn sceGxmMapMemory(base: *mut *mut crate::void, size: SceSize, attr: SceGxmMemoryAttribFlags) -> i32;
    pub fn sceGxmUnmapMemory(base: *mut *mut crate::void) -> i32;
    //
    pub fn sceGxmMapVertexUsseMemory(base: *mut *mut crate::void, size: SceSize, offset: *mut u32) -> i32;
    pub fn sceGxmUnmapVertexUsseMemory(base: *mut *mut crate::void) -> i32;
    //
    pub fn sceGxmMapFragmentUsseMemory(base: *mut *mut crate::void, size: SceSize, offset: *mut u32) -> i32;
    pub fn sceGxmUnmapFragmentUsseMemory(base: *mut *mut crate::void) -> i32;
    //
    pub fn sceGxmDisplayQueueAddEntry(oldBuffer: *const SceGxmSyncObject, newBuffer: *const SceGxmSyncObject, callbackData: *const crate::void) -> i32;
    pub fn sceGxmDisplayQueueFinish() -> i32;
    //
    pub fn sceGxmSyncObjectCreate(syncObject: *mut *mut SceGxmSyncObject) -> i32;
    pub fn sceGxmSyncObjectDestroy(syncObject: *const SceGxmSyncObject) -> i32;
    //
    pub fn sceGxmCreateContext(params: *const SceGxmContextParams, context: *mut *mut SceGxmContext) -> i32;
    pub fn sceGxmDestroyContext(context: *const SceGxmContext) -> i32;
    //
    pub fn sceGxmSetValidationEnable(context: *const SceGxmContext, enable: SceBool);
    //
    pub fn sceGxmSetVertexProgram(context: *const SceGxmContext, vertexProgram: *const SceGxmVertexProgram);
    pub fn sceGxmSetFragmentProgram(context: *const SceGxmContext, fragmentProgram: *const SceGxmFragmentProgram);
    //
    pub fn sceGxmReserveVertexDefaultUniformBuffer(context: *const SceGxmContext, uniformBuffer: *mut *mut crate::void) -> i32;
    pub fn sceGxmReserveFragmentDefaultUniformBuffer(context: *const SceGxmContext, uniformBuffer: *mut *mut crate::void) -> i32;
    //
    pub fn sceGxmSetVertexStream(context: *const SceGxmContext, streamIndex: u32, streamData: *const crate::void) -> i32;
    pub fn sceGxmSetVertexTexture(context: *const SceGxmContext, textureIndex: u32, texture: *const SceGxmTexture) -> i32;
    pub fn sceGxmSetFragmentTexture(context: *const SceGxmContext, textureIndex: u32, texture: *const SceGxmTexture) -> i32;
    pub fn sceGxmSetVertexUniformBuffer(context: *const SceGxmContext, bufferIndex: u32, bufferData: *const crate::void) -> i32;
    pub fn sceGxmSetFragmentUniformBuffer(context: *const SceGxmContext, bufferIndex: u32, bufferData: *const crate::void) -> i32;
    pub fn sceGxmSetAuxiliarySurface(context: *const SceGxmContext, surfaceIndex: u32, surface: *const SceGxmAuxiliarySurface) -> i32;
    //
    pub fn sceGxmSetPrecomputedFragmentState(context: *const SceGxmContext, precomputedState: *const SceGxmPrecomputedFragmentState);
    pub fn sceGxmSetPrecomputedVertexState(context: *const SceGxmContext, precomputedState: *const SceGxmPrecomputedVertexState);
    //
    pub fn sceGxmDrawPrecomputed(context: *const SceGxmContext, precomputedDraw: *const SceGxmPrecomputedDraw) -> i32;
    pub fn sceGxmDraw(context: *const SceGxmContext, primType: SceGxmPrimitiveType, indexType: SceGxmIndexFormat, indexData: *const crate::void, indexCount: u32) -> i32;
    pub fn sceGxmDrawInstanced(context: *const SceGxmContext, primType: SceGxmPrimitiveType, indexType: SceGxmIndexFormat, indexData: *const crate::void, indexCount: u32, indexWrap: u32) -> i32;
    pub fn sceGxmSetVisibilityBuffer(context: *const SceGxmContext, bufferBase: *const crate::void, stridePerCore: u32) -> i32;
    //
    pub fn sceGxmBeginScene(context: *const SceGxmContext, flags: u32, renderTarget: *const SceGxmRenderTarget, validRegion: *const SceGxmValidRegion, vertexSyncObject: *const SceGxmSyncObject, fragmentSyncObject: *const SceGxmSyncObject, colorSurface: *const SceGxmColorSurface, depthStencil: *const SceGxmDepthStencilSurface) -> i32;
    pub fn sceGxmMidSceneFlush(context: *const SceGxmContext, flags: u32, vertexSyncObject: *const SceGxmSyncObject, vertexNotification: *const SceGxmNotification) -> i32;
    pub fn sceGxmEndScene(context: *const SceGxmContext, vertexNotification: *const SceGxmNotification, fragmentNotification: *const SceGxmNotification) -> i32;
    //
    pub fn sceGxmSetFrontDepthFunc(context: *const SceGxmContext, depthFunc: SceGxmDepthFunc);
    pub fn sceGxmSetBackDepthFunc(context: *const SceGxmContext, depthFunc: SceGxmDepthFunc);
    pub fn sceGxmSetFrontFragmentProgramEnable(context: *const SceGxmContext, enable: SceGxmFragmentProgramMode);
    pub fn sceGxmSetBackFragmentProgramEnable(context: *const SceGxmContext, enable: SceGxmFragmentProgramMode);
    pub fn sceGxmSetFrontDepthWriteEnable(context: *const SceGxmContext, enable: SceGxmDepthWriteMode);
    pub fn sceGxmSetBackDepthWriteEnable(context: *const SceGxmContext, enable: SceGxmDepthWriteMode);
    pub fn sceGxmSetFrontLineFillLastPixelEnable(context: *const SceGxmContext, enable: SceGxmLineFillLastPixelMode);
    pub fn sceGxmSetBackLineFillLastPixelEnable(context: *const SceGxmContext, enable: SceGxmLineFillLastPixelMode);
    pub fn sceGxmSetFrontStencilRef(context: *const SceGxmContext, sref: u32);
    pub fn sceGxmSetBackStencilRef(context: *const SceGxmContext, sref: u32);
    pub fn sceGxmSetFrontPointLineWidth(context: *const SceGxmContext, width: u32);
    pub fn sceGxmSetBackPointLineWidth(context: *const SceGxmContext, width: u32);
    pub fn sceGxmSetFrontPolygonMode(context: *const SceGxmContext, mode: SceGxmPolygonMode);
    pub fn sceGxmSetBackPolygonMode(context: *const SceGxmContext, mode: SceGxmPolygonMode);
    pub fn sceGxmSetFrontStencilFunc(context: *const SceGxmContext, func: SceGxmStencilFunc, stencilFail: SceGxmStencilOp, depthFail: SceGxmStencilOp, depthPass: SceGxmStencilOp, compareMask: u8, writeMask: u8);
    pub fn sceGxmSetBackStencilFunc(context: *const SceGxmContext, func: SceGxmStencilFunc, stencilFail: SceGxmStencilOp, depthFail: SceGxmStencilOp, depthPass: SceGxmStencilOp, compareMask: u8, writeMask: u8);
    pub fn sceGxmSetFrontDepthBias(context: *const SceGxmContext, factor: i32, units: i32);
    pub fn sceGxmSetBackDepthBias(context: *const SceGxmContext, factor: i32, units: i32);
    pub fn sceGxmSetTwoSidedEnable(context: *const SceGxmContext, enable: SceGxmTwoSidedMode);
    pub fn sceGxmSetViewport(context: *const SceGxmContext, xOffset: f32, xScale: f32, yOffset: f32, yScale: f32, zOffset: f32, zScale: f32);
    pub fn sceGxmSetWClampValue(context: *const SceGxmContext, clampValue: f32);
    pub fn sceGxmSetWClampEnable(context: *const SceGxmContext, enable: SceGxmWClampMode);
    pub fn sceGxmSetRegionClip(context: *const SceGxmContext, mode: SceGxmRegionClipMode, xMin: u32, yMin: u32, xMax: u32, yMax: u32);
    pub fn sceGxmSetCullMode(context: *const SceGxmContext, mode: SceGxmCullMode);
    pub fn sceGxmSetViewportEnable(context: *const SceGxmContext, enable: SceGxmViewportMode);
    pub fn sceGxmSetWBufferEnable(context: *const SceGxmContext, enable: SceGxmWBufferMode);
    pub fn sceGxmSetFrontVisibilityTestIndex(context: *const SceGxmContext, index: u32);
    pub fn sceGxmSetBackVisibilityTestIndex(context: *const SceGxmContext, index: u32);
    pub fn sceGxmSetFrontVisibilityTestOp(context: *const SceGxmContext, op: SceGxmVisibilityTestOp);
    pub fn sceGxmSetBackVisibilityTestOp(context: *const SceGxmContext, op: SceGxmVisibilityTestOp);
    pub fn sceGxmSetFrontVisibilityTestEnable(context: *const SceGxmContext, enable: SceGxmVisibilityTestMode);
    pub fn sceGxmSetBackVisibilityTestEnable(context: *const SceGxmContext, enable: SceGxmVisibilityTestMode);
    //
    pub fn sceGxmFinish(context: *const SceGxmContext);
    //
    pub fn sceGxmPushUserMarker(context: *const SceGxmContext, tag: *const u8) -> i32;
    pub fn sceGxmPopUserMarker(context: *const SceGxmContext) -> i32;
    pub fn sceGxmSetUserMarker(context: *const SceGxmContext, tag: *const u8) -> i32;
    //
    pub fn sceGxmPadHeartbeat(displaySurface: *const SceGxmColorSurface, displaySyncObject: *const SceGxmSyncObject) -> i32;
    //
    pub fn sceGxmPadTriggerGpuPaTrace() -> i32;
    //
    pub fn sceGxmColorSurfaceInit(surface: *const SceGxmColorSurface, colorFormat: SceGxmColorFormat, surfaceType: SceGxmColorSurfaceType, scaleMode: SceGxmColorSurfaceScaleMode, outputRegisterSize: SceGxmOutputRegisterSize, width: u32, height: u32, strideInPixels: u32, data: *const crate::void) -> i32;
    pub fn sceGxmColorSurfaceInitDisabled(surface: *const SceGxmColorSurface) -> i32;
    pub fn sceGxmColorSurfaceIsEnabled(surface: *const SceGxmColorSurface) -> SceBool;
    pub fn sceGxmColorSurfaceGetClip(surface: *const SceGxmColorSurface, xMin: *const u32, yMin: *const u32, xMax: *const u32, yMax: *const u32);
    pub fn sceGxmColorSurfaceSetClip(surface: *const SceGxmColorSurface, xMin: *const u32, yMin: u32, xMax: u32, yMax: u32);
    //
    pub fn sceGxmColorSurfaceGetScaleMode(surface: *const SceGxmColorSurface) -> SceGxmColorSurfaceScaleMode;
    pub fn sceGxmColorSurfaceSetScaleMode(surface: *const SceGxmColorSurface, scaleMode: SceGxmColorSurfaceScaleMode);
    //
    pub fn sceGxmColorSurfaceGetData(surface: *const SceGxmColorSurface) -> *const crate::void;
    pub fn sceGxmColorSurfaceSetData(surface: *const SceGxmColorSurface, data: *const crate::void) -> i32;
    //
    pub fn sceGxmColorSurfaceGetFormat(surface: *const SceGxmColorSurface) -> SceGxmColorFormat;
    pub fn sceGxmColorSurfaceSetFormat(surface: *const SceGxmColorSurface, format: SceGxmColorFormat) -> i32;
    pub fn sceGxmColorSurfaceGetType(surface: *const SceGxmColorSurface) -> SceGxmColorSurfaceType;
    pub fn sceGxmColorSurfaceGetStrideInPixels(surface: *const SceGxmColorSurface) -> u32;
    //
    pub fn sceGxmDepthStencilSurfaceInit(surface: *const SceGxmDepthStencilSurface, depthStencilFormat: SceGxmDepthStencilFormat, surfaceType: SceGxmDepthStencilSurfaceType, strideInSamples: u32, depthData: *const crate::void, stencilData: *const crate::void) -> i32;
    pub fn sceGxmDepthStencilSurfaceInitDisabled(surface: *const SceGxmDepthStencilSurface) -> i32;
    pub fn sceGxmDepthStencilSurfaceGetBackgroundDepth(surface: *const SceGxmDepthStencilSurface) -> f32;
    pub fn sceGxmDepthStencilSurfaceSetBackgroundDepth(surface: *const SceGxmDepthStencilSurface, backgroundDepth: f32);
    pub fn sceGxmDepthStencilSurfaceGetBackgroundStencil(surface: *const SceGxmDepthStencilSurface) -> u8;
    pub fn sceGxmDepthStencilSurfaceSetBackgroundStencil(surface: *const SceGxmDepthStencilSurface, backgroundStencil: u8);
    pub fn sceGxmDepthStencilSurfaceIsEnabled(surface: *const SceGxmDepthStencilSurface) -> SceBool;
    pub fn sceGxmDepthStencilSurfaceSetForceLoadMode(surface: *const SceGxmDepthStencilSurface, forceLoad: SceGxmDepthStencilForceLoadMode);
    pub fn sceGxmDepthStencilSurfaceGetForceLoadMode(surface: *const SceGxmDepthStencilSurface) -> SceGxmDepthStencilForceLoadMode;
    pub fn sceGxmDepthStencilSurfaceSetForceStoreMode(surface: *const SceGxmDepthStencilSurface, forceStore: SceGxmDepthStencilForceStoreMode);
    pub fn sceGxmDepthStencilSurfaceGetForceStoreMode(surface: *const SceGxmDepthStencilSurface) -> SceGxmDepthStencilForceStoreMode;
    //
    pub fn sceGxmColorSurfaceGetGammaMode(surface: *const SceGxmColorSurface) -> SceGxmColorSurfaceGammaMode;
    pub fn sceGxmColorSurfaceSetGammaMode(surface: *const SceGxmColorSurface, gammaMode: SceGxmColorSurfaceGammaMode) -> i32;
    pub fn sceGxmColorSurfaceGetDitherMode(surface: *const SceGxmColorSurface) -> SceGxmColorSurfaceDitherMode;
    pub fn sceGxmColorSurfaceSetDitherMode(surface: *const SceGxmColorSurface, ditherMode: SceGxmColorSurfaceDitherMode) -> i32;
    //
    pub fn sceGxmDepthStencilSurfaceGetFormat(surface: *const SceGxmDepthStencilSurface) -> SceGxmDepthStencilFormat;
    pub fn sceGxmDepthStencilSurfaceGetStrideInSamples(surface: *const SceGxmDepthStencilSurface) -> u32;
    //
    pub fn sceGxmProgramCheck(program: *const SceGxmProgram) -> i32;
    pub fn sceGxmProgramGetSize(program: *const SceGxmProgram) -> u32;
    pub fn sceGxmProgramGetType(program: *const SceGxmProgram) -> SceGxmProgramType;
    pub fn sceGxmProgramIsDiscardUsed(program: *const SceGxmProgram) -> SceBool;
    pub fn sceGxmProgramIsDepthReplaceUsed(program: *const SceGxmProgram) -> SceBool;
    pub fn sceGxmProgramIsSpriteCoordUsed(program: *const SceGxmProgram) -> SceBool;
    pub fn sceGxmProgramGetDefaultUniformBufferSize(program: *const SceGxmProgram) -> u32;
    pub fn sceGxmProgramGetParameterCount(program: *const SceGxmProgram) -> u32;
    //
    pub fn sceGxmProgramGetParameter(program: *const SceGxmProgram, index: u32) -> *const SceGxmProgramParameter;
    pub fn sceGxmProgramFindParameterByName(program: *const SceGxmProgram, name: *const u8) -> *const SceGxmProgramParameter;
    pub fn sceGxmProgramFindParameterBySemantic(program: *const SceGxmProgram, semantic: SceGxmParameterSemantic, index: u32) -> *const SceGxmProgramParameter;
    pub fn sceGxmProgramParameterGetIndex(program: *const SceGxmProgram, parameter: *const SceGxmProgramParameter) -> u32;
    pub fn sceGxmProgramParameterGetCategory(parameter: *const SceGxmProgramParameter) -> SceGxmParameterCategory;
    pub fn sceGxmProgramParameterGetName(parameter: *const SceGxmProgramParameter) -> *const u8;
    pub fn sceGxmProgramParameterGetSemantic(parameter: *const SceGxmProgramParameter) -> SceGxmParameterSemantic;
    pub fn sceGxmProgramParameterGetSemanticIndex(parameter: *const SceGxmProgramParameter) -> u32;
    pub fn sceGxmProgramParameterGetType(parameter: *const SceGxmProgramParameter) -> SceGxmParameterType;
    pub fn sceGxmProgramParameterGetComponentCount(parameter: *const SceGxmProgramParameter) -> u32;
    pub fn sceGxmProgramParameterGetArraySize(parameter: *const SceGxmProgramParameter) -> u32;
    pub fn sceGxmProgramParameterGetResourceIndex(parameter: *const SceGxmProgramParameter) -> u32;
    pub fn sceGxmProgramParameterGetContainerIndex(parameter: *const SceGxmProgramParameter) -> u32;
    pub fn sceGxmProgramParameterIsSamplerCube(parameter: *const SceGxmProgramParameter) -> SceBool;
    //
    pub fn sceGxmFragmentProgramGetProgram(fragmentProgram: *const SceGxmFragmentProgram) -> *const SceGxmProgram;
    pub fn sceGxmVertexProgramGetProgram(vertexProgram: *const SceGxmVertexProgram) -> *const SceGxmProgram;
    //
    pub fn sceGxmShaderPatcherCreate(params: *const SceGxmShaderPatcherParams, shaderPatcher: *mut *mut SceGxmShaderPatcher) -> i32;
    pub fn sceGxmShaderPatcherSetUserData(shaderPatcher: *const SceGxmShaderPatcher, userData: *const crate::void) -> i32;
    pub fn sceGxmShaderPatcherGetUserData(shaderPatcher: *const SceGxmShaderPatcher) -> *const crate::void;
    pub fn sceGxmShaderPatcherDestroy(shaderPatcher: *const SceGxmShaderPatcher) -> i32;
    pub fn sceGxmShaderPatcherRegisterProgram(shaderPatcher: *const SceGxmShaderPatcher, program: *const SceGxmProgram, programId: *mut SceGxmShaderPatcherId) -> i32;
    pub fn sceGxmShaderPatcherUnregisterProgram(shaderPatcher: *const SceGxmShaderPatcher, programId: SceGxmShaderPatcherId) -> i32;
    pub fn sceGxmShaderPatcherForceUnregisterProgram(shaderPatcher: *const SceGxmShaderPatcher, programId: SceGxmShaderPatcherId) -> i32;
    pub fn sceGxmShaderPatcherGetProgramFromId(programId: SceGxmShaderPatcherId) -> *const SceGxmProgram;
    pub fn sceGxmShaderPatcherSetAuxiliarySurface(shaderPatcher: *const SceGxmShaderPatcher, auxSurfaceIndex: u32, auxSurface: *const SceGxmAuxiliarySurface) -> i32;
    pub fn sceGxmShaderPatcherCreateVertexProgram(shaderPatcher: *const SceGxmShaderPatcher, programId: SceGxmShaderPatcherId, attributes: *const SceGxmVertexAttribute, attributeCount: u32, streams: *const SceGxmVertexStream, streamCount: u32, vertexProgram: *mut *mut SceGxmVertexProgram) -> i32;
    pub fn sceGxmShaderPatcherCreateFragmentProgram(shaderPatcher: *const SceGxmShaderPatcher, programId: SceGxmShaderPatcherId, outputFormat: SceGxmOutputRegisterFormat, multisampleMode: SceGxmMultisampleMode, blendInfo: *const SceGxmBlendInfo, vertexProgram: *const SceGxmProgram, fragmentProgram: *mut *mut SceGxmFragmentProgram) -> i32;
    pub fn sceGxmShaderPatcherAddRefVertexProgram(shaderPatcher: *const SceGxmShaderPatcher, vertexProgram: *const SceGxmVertexProgram) -> i32;
    pub fn sceGxmShaderPatcherAddRefFragmentProgram(shaderPatcher: *const SceGxmShaderPatcher, fragmentProgram: *const SceGxmFragmentProgram) -> i32;
    pub fn sceGxmShaderPatcherReleaseVertexProgram(shaderPatcher: *const SceGxmShaderPatcher, vertexProgram: *const SceGxmVertexProgram) -> i32;
    pub fn sceGxmShaderPatcherReleaseFragmentProgram(shaderPatcher: *const SceGxmShaderPatcher, fragmentProgram: *const SceGxmFragmentProgram) -> i32;
    pub fn sceGxmShaderPatcherGetHostMemAllocated(shaderPatcher: *const SceGxmShaderPatcher) -> u32;
    pub fn sceGxmShaderPatcherGetBufferMemAllocated(shaderPatcher: *const SceGxmShaderPatcher) -> u32;
    pub fn sceGxmShaderPatcherGetVertexUsseMemAllocated(shaderPatcher: *const SceGxmShaderPatcher) -> u32;
    pub fn sceGxmShaderPatcherGetFragmentUsseMemAllocated(shaderPatcher: *const SceGxmShaderPatcher) -> u32;
    //
    pub fn sceGxmTextureInitSwizzled(texture: *const SceGxmTexture, data: *const crate::void, texFormat: SceGxmTextureFormat, width: u32, height: u32, mipCount: u32) -> i32;
    pub fn sceGxmTextureInitLinear(texture: *const SceGxmTexture, data: *const crate::void, texFormat: SceGxmTextureFormat, width: u32, height: u32, mipCount: u32) -> i32;
    pub fn sceGxmTextureInitLinearStrided(texture: *const SceGxmTexture, data: *const crate::void, texFormat: SceGxmTextureFormat, width: u32, height: u32, byteStride: u32) -> i32;
    pub fn sceGxmTextureInitTiled(texture: *const SceGxmTexture, data: *const crate::void, texFormat: SceGxmTextureFormat, width: u32, height: u32, mipCount: u32) -> i32;
    pub fn sceGxmTextureInitCube(texture: *const SceGxmTexture, data: *const crate::void, texFormat: SceGxmTextureFormat, width: u32, height: u32, mipCount: u32) -> i32;
    //
    pub fn sceGxmTextureGetType(texture: *const SceGxmTexture) -> SceGxmTextureType;
    //
    pub fn sceGxmTextureSetMinFilter(texture: *const SceGxmTexture, minFilter: SceGxmTextureFilter) -> i32;
    pub fn sceGxmTextureGetMinFilter(texture: *const SceGxmTexture) -> SceGxmTextureFilter;
    //
    pub fn sceGxmTextureSetMagFilter(texture: *const SceGxmTexture, magFilter: SceGxmTextureFilter) -> i32;
    pub fn sceGxmTextureGetMagFilter(texture: *const SceGxmTexture) -> SceGxmTextureFilter;
    //
    pub fn sceGxmTextureSetMipFilter(texture: *const SceGxmTexture, mipFilter: SceGxmTextureMipFilter) -> i32;
    pub fn sceGxmTextureGetMipFilter(texture: *const SceGxmTexture) -> SceGxmTextureMipFilter;
    //
    pub fn sceGxmTextureSetUAddrMode(texture: *const SceGxmTexture, addrMode: SceGxmTextureAddrMode) -> i32;
    pub fn sceGxmTextureGetUAddrMode(texture: *const SceGxmTexture) -> SceGxmTextureAddrMode;
    //
    pub fn sceGxmTextureSetVAddrMode(texture: *const SceGxmTexture, addrMode: SceGxmTextureAddrMode) -> i32;
    pub fn sceGxmTextureGetVAddrMode(texture: *const SceGxmTexture) -> SceGxmTextureAddrMode;
    //
    pub fn sceGxmTextureSetFormat(texture: *const SceGxmTexture, texFormat: SceGxmTextureFormat) -> i32;
    pub fn sceGxmTextureGetFormat(texture: *const SceGxmTexture) -> SceGxmTextureFormat;
    //
    pub fn sceGxmTextureSetLodBias(texture: *const SceGxmTexture, bias: u32) -> i32;
    pub fn sceGxmTextureGetLodBias(texture: *const SceGxmTexture) -> u32;
    //
    pub fn sceGxmTextureSetStride(texture: *const SceGxmTexture, byteStride: u32) -> i32;
    pub fn sceGxmTextureGetStride(texture: *const SceGxmTexture) -> u32;
    //
    pub fn sceGxmTextureSetWidth(texture: *const SceGxmTexture, width: u32) -> i32;
    pub fn sceGxmTextureGetWidth(texture: *const SceGxmTexture) -> u32;
    //
    pub fn sceGxmTextureSetHeight(texture: *const SceGxmTexture, height: u32) -> i32;
    pub fn sceGxmTextureGetHeight(texture: *const SceGxmTexture) -> u32;
    //
    pub fn sceGxmTextureSetData(texture: *const SceGxmTexture, data: *const crate::void) -> i32;
    pub fn sceGxmTextureGetData(texture: *const SceGxmTexture) -> *const crate::void;
    //
    pub fn sceGxmTextureSetMipmapCount(texture: *const SceGxmTexture, mipCount: u32) -> i32;
    pub fn sceGxmTextureGetMipmapCount(texture: *const SceGxmTexture) -> u32;
    //
    pub fn sceGxmTextureSetPalette(texture: *const SceGxmTexture, paletteData: *const crate::void) -> i32;
    pub fn sceGxmTextureGetPalette(texture: *const SceGxmTexture) -> *const crate::void;
    //
    pub fn sceGxmTextureGetGammaMode(texture: *const SceGxmTexture) -> SceGxmTextureGammaMode;
    pub fn sceGxmTextureSetGammaMode(texture: *const SceGxmTexture, gammaMode: SceGxmTextureGammaMode) -> i32;
    //
    pub fn sceGxmGetPrecomputedVertexStateSize(vertexProgram: *const SceGxmVertexProgram) -> u32;
    pub fn sceGxmPrecomputedVertexStateInit(precomputedState: *const SceGxmPrecomputedVertexState, vertexProgram: *const SceGxmVertexProgram, memBlock: *const crate::void) -> i32;
    pub fn sceGxmPrecomputedVertexStateSetDefaultUniformBuffer(precomputedState: *const SceGxmPrecomputedVertexState, defaultBuffer: *const crate::void);
    pub fn sceGxmPrecomputedVertexStateGetDefaultUniformBuffer(precomputedState: *const SceGxmPrecomputedVertexState) -> *const crate::void;
    //pub fn sceGxmPrecomputedVertexStateSetAllTextures(precomputedState: *const SceGxmPrecomputedVertexState, texture: *const SceGxmTextures) -> i32;
    pub fn sceGxmPrecomputedVertexStateSetTexture(precomputedState: *const SceGxmPrecomputedVertexState, textureIndex: u32, texture: *const SceGxmTexture) -> i32;
    pub fn sceGxmPrecomputedVertexStateSetAllUniformBuffers(precomputedState: *const SceGxmPrecomputedVertexState, bufferDataArray: *const *const crate::void) -> i32;
    pub fn sceGxmPrecomputedVertexStateSetUniformBuffer(precomputedState: *const SceGxmPrecomputedVertexState, bufferIndex: u32, bufferData: *const crate::void) -> i32;
    pub fn sceGxmGetPrecomputedFragmentStateSize(fragmentProgram: *const SceGxmFragmentProgram) -> u32;
    pub fn sceGxmPrecomputedFragmentStateInit(precomputedState: *const SceGxmPrecomputedFragmentState, fragmentProgram: *const SceGxmFragmentProgram, memBlock: *const crate::void) -> i32;
    pub fn sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer(precomputedState: *const SceGxmPrecomputedFragmentState, defaultBuffer: *const crate::void);
    pub fn sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer(precomputedState: *const SceGxmPrecomputedFragmentState) -> *const crate::void;
    //pub fn sceGxmPrecomputedFragmentStateSetAllTextures(precomputedState: *const SceGxmPrecomputedFragmentState, texture: *const SceGxmTextureArray) -> i32;
    pub fn sceGxmPrecomputedFragmentStateSetTexture(precomputedState: *const SceGxmPrecomputedFragmentState, textureIndex: u32, texture: *const SceGxmTexture) -> i32;
    pub fn sceGxmPrecomputedFragmentStateSetAllUniformBuffers(precomputedState: *const SceGxmPrecomputedFragmentState, bufferDataArray: *const *const crate::void) -> i32;
    pub fn sceGxmPrecomputedFragmentStateSetUniformBuffer(precomputedState: *const SceGxmPrecomputedFragmentState, bufferIndex: u32, bufferData: *const crate::void) -> i32;
    pub fn sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces(precomputedState: *const SceGxmPrecomputedFragmentState, auxSurfaceArray: *const SceGxmAuxiliarySurface) -> i32;
    pub fn sceGxmGetPrecomputedDrawSize(vertexProgram: *const SceGxmVertexProgram) -> u32;
    pub fn sceGxmPrecomputedDrawInit(precomputedDraw: *const SceGxmPrecomputedDraw, vertexProgram: *const SceGxmVertexProgram, memBlock: *const crate::void) -> i32;
    pub fn sceGxmPrecomputedDrawSetAllVertexStreams(precomputedDraw: *const SceGxmPrecomputedDraw, streamDataArray: *const *const crate::void) -> i32;
    pub fn sceGxmPrecomputedDrawSetVertexStream(precomputedDraw: *const SceGxmPrecomputedDraw, streamIndex: u32, streamData: *const crate::void) -> i32;
    pub fn sceGxmPrecomputedDrawSetParams(precomputedDraw: *const SceGxmPrecomputedDraw, primType: SceGxmPrimitiveType, indexType: SceGxmIndexFormat, indexData: *const crate::void, indexCount: u32);
    pub fn sceGxmPrecomputedDrawSetParamsInstanced(precomputedDraw: *const SceGxmPrecomputedDraw, primType: SceGxmPrimitiveType, indexType: SceGxmIndexFormat, indexData: *const crate::void, indexCount: u32, indexWrap: u32);
    //
    pub fn sceGxmGetRenderTargetMemSizes(params: *const SceGxmRenderTargetParams, hostMemSize: *const u32, driverMemSize: *const u32) -> i32;
    pub fn sceGxmCreateRenderTarget(params: *const SceGxmRenderTargetParams, renderTarget: *mut *mut SceGxmRenderTarget) -> i32;
    pub fn sceGxmRenderTargetGetHostMem(renderTarget: *const SceGxmRenderTarget, hostMem: *mut *mut crate::void) -> i32;
    pub fn sceGxmRenderTargetGetDriverMemBlock(renderTarget: *const SceGxmRenderTarget, driverMemBlock: *const SceUID) -> i32;
    pub fn sceGxmDestroyRenderTarget(renderTarget: *const SceGxmRenderTarget) -> i32;
    //
    pub fn sceGxmSetUniformDataF(uniformBuffer: *const crate::void, parameter: *const SceGxmProgramParameter, componentOffset: u32, componentCount: u32, sourceData: *const f32) -> i32;
    //
    pub fn sceGxmTransferCopy(width: u32, height: u32, colorKeyValue: u32, colorKeyMask: u32, colorKeyMode: SceGxmTransferColorKeyMode, srcFormat: SceGxmTransferFormat, srcType: SceGxmTransferType, srcAddress: *const crate::void, srcX: u32, srcY: u32, srcStride: i32, destFormat: SceGxmTransferFormat, destType: SceGxmTransferType, destAddress: *const crate::void, destX: u32, destY: u32, destStride: i32, syncObject: *const SceGxmSyncObject, syncFlags: u32, notification: *const SceGxmNotification) -> i32;
    pub fn sceGxmTransferDownscale(srcFormat: SceGxmTransferFormat, srcAddress: *const crate::void, srcX: u32, srcY: u32, srcWidth: u32, srcHeight: u32, srcStride: i32, destFormat: SceGxmTransferFormat, destAddress: *const crate::void, destX: u32, destY: u32, destStride: i32, syncObject: *const SceGxmSyncObject, syncFlags: u32, notification: *const SceGxmNotification) -> i32;
    pub fn sceGxmTransferFinish() -> i32;
}